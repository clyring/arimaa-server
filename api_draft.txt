
################################################################################
Arimaa Game Server JSON API
################################################################################

#TODO - see todos below

All requests and responses are in JSON.

Shared types:
<Message> = {"message":<String>}
<Error> = {"error":<String>}
<GameID> = <Int>   #Identifier for a game
<Auth> = <String>  #Authorization token returned from logging in
<GameAuth> = <String>  #Authorization token returned from joining a game
<Username> = <String>

===ACCOUNTS========================================================
To register an account:
POST /accounts/register {"username":<Username>,"email":<String>,"password":<String>}

#TODO add other account facilities
#TODO add ways of looking up users

===LOGIN===========================================================
To log in:
POST /accounts/login {"username":<Username>,"password":<String>}
Response if successful = {"auth":<Auth>}
Response if not successful = <Error>

To log out:
POST /accounts/logout {"auth":<Auth>}
Response if successful = <Message>
Response if not successful = <Error>

===GAMEROOM========================================================
<Board> = {
  "record":<String>, #Full game record, ex:"1g Ra1 Cc2\n1s ra7\n2g Ra1n Ra2n Ra3n Ra4n\n2s"
  "moves":[<String>,<String>,<String>,...], #Moves made in the game, ex: ["Ra1","Ra7","Ra1n Ra2n Ra3n Ra4n"]
  "toMove":<String>, #"g" or "s"
  "position":<String> #FEN-style string, ex: "1r4r/rHc2rcD/rm/1E3M/1R1dr/1DedCR/2H1r/"
}

<UserInfo> = {
  "username":<Username>,
  "rating":<Float>
}

<GameResult> = {
  "resultCode":<String>,
  "endTime":<Float>
}

<GameMetadata> = {
  "id":<Int>,
  "plyCount":<Int>,
  "startTime":<Float>,
  "moveTimes":[<Float>,<Float>,<Float>,...], #Seconds since the epoch that each move was made
  "gUser":<UserInfo>,
  "sUser":<UserInfo>,
  "gTC":<PlayerTimeControl>, #Time control for Gold
  "sTC":<PlayerTimeControl>, #Time control for Silver
  "rated":<Bool>, #Whether the game was used for rating calculations
  "experimental":<Bool>, #Whether the game allows nontraditional setups (handicaps, alternate starting positions)
  "active":<Bool> #Whether the game is open or is being played right now
  "result":<GameResult> #ONLY present if the game is not active!
}

<GameState> = {
  "board":<Board>,
  "meta":<GameMetadata>,
  "lastMoveTime":<Float>,
  "gReserveLeft":<Float>,
  "sReserveLeft":<Float>,
  "gPresent":<Bool>,
  "sPresent":<Bool>,
  "now":<Float>
}

To get just the metadata about a game;
GET /games/<GameID>/metadata
Response if successful = <GameMetadata>
Response if not successful = <Error>

To get the full state of a game:
GET /games/<GameID>/state
Response if successful = <GameState>
Response if not successful = <Error>

#TODO - interface for creating a game
#TODO - detect timeouts via heartbeating?

To join, leave, make a move, resign a game:
POST /games/<GameID>/actions/join {"auth":<Auth>}
POST /games/<GameID>/actions/leave {"auth":<Auth>}
POST /games/<GameID>/actions/move {"gameauth":<GameAuth>, "move":<String>}
POST /games/<GameID>/actions/resign {"gameauth":<GameAuth>}

Response if successful = <Message>
Response if not successful = <Error>

To get a list of all games satisfying:
GET /games/search?key=value&key=value&...
Legal keys and values:
  player1=<UserName>  #Involves the given user
  player2=<UserName>  #Involves the given user
  gplayer=<UserName>  #Gold player is the given user
  splayer=<UserName>  #Silver player is the given user
  rated=<Bool>        #Require games to be rated or unrated
  experimental=<Bool> #Require games to be experimental or not
  active=<Bool>       #Require games to be active or not
  limit=<Int>         #Limit the number of returned games to this many (default 100, max 1000)
  mintime=<Int>       #game occurs on or after this timestamp
  maxtime=<Int>       #game occurs on or before this timestamp
  mindate=<String>    #ex: 2015-01-01, game occurs on or after this date in the given timezone
  maxdate=<String>    #ex: 2015-01-01, game occurs on or before this date in the given timezone
  zone=<String>       #Timezone for mindate and maxdate, default UTC

Response if successful = [<GameMetadata>,<GameMetadata>,...]
Response if not successful = <Error>
