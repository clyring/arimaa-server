
################################################################################
Arimaa Game Server JSON API
################################################################################

#TODO - see todos below

All requests and responses are in JSON.

Shared types:
<Message> = {"message":<String>}
<Error> = {"error":<String>}
<GameID> = <Int>   #Identifier for a game
<Auth> = <String>  #Authorization token returned from logging in
<GameAuth> = <String>  #Authorization token returned from joining a game
<Username> = <String>
<Timestamp> = <Float> #Seconds since the epoch (1970-01-01 00:00 UTC) (up to however much precision the server has)

===ACCOUNTS========================================================
To register an account:
POST /accounts/register {"username":<Username>,"email":<String>,"password":<String>}

#TODO add other account facilities
#TODO add ways of looking up users

===LOGIN===========================================================
To log in:
POST /accounts/login {"username":<Username>,"password":<String>}
Response if successful = {"username":<Username>,"auth":<Auth>}
Response if not successful = <Error>

To log out:
POST /accounts/logout {"auth":<Auth>}
Response if successful = <Message>
Response if not successful = <Error>

===GAMEROOM========================================================
<Board> = {
  "history":[<String>,<String>,<String>,...], #Move history in the order [1g,1s,2g,2s...] ex: ["Ra1","Ra7","Ra1n Ra2n Ra3n Ra4n"]
  "toMove":<String>,  #Next player to move, either "g" or "s"
  "position":<String> #64-char string specifying the board in the order a8-h8,a7-h7,...,a1-h1
                      #ex:"rrrrrrrrchdemdhc                                CHDMEDHCRRRRRRRR"
}

<UserInfo> = {
  "username":<Username>,
  "rating":<Float>
}

<GameResult> = {
  "resultCode":<String>, #TODO - describe this. Same as current Arimaa resultCode system seems okay
  "endTime":<Timestamp>
}

<PlayerTimeControl> = {
  #TODO - probably just adopt the current arimaa time control system or something similar
}

<GameMetadata> = {
  "id":<Int>,
  "numMoves":<Int>, #Total number of moves made in the game (ex: {1g, 1s, 2g, 2s, 3g} = 5 moves)
  "startTime":<Timestamp> #Time that the game clock was started
  "moveTimes":[<Timestamp>,<Timestamp>,<Timestamp>,...], #Time that each move was received and played
  "gUser":<UserInfo>,
  "sUser":<UserInfo>,
  "gTC":<PlayerTimeControl>, #Time control for Gold
  "sTC":<PlayerTimeControl>, #Time control for Silver
  "rated":<Bool>, #Whether the game was used for rating calculations
  "experimental":<Bool>, #Whether the game allows nontraditional setups (handicaps, alternate starting positions)
  "active":<Bool> #Whether the game is open or is being played right now
  "result":<GameResult> #ONLY present if the game is not active!
}

<GameState> = {
  "board":<Board>,
  "meta":<GameMetadata>,
  "lastMoveTime":<Timestamp>,
  "gReserveLeft":<Float>, #in seconds
  "sReserveLeft":<Float>, #in seconds
  "gPresent":<Bool>,
  "sPresent":<Bool>,
  "now":<Timestamp>
}

To get just the metadata about a game;
GET /game/<GameID>/metadata
Response if successful = <GameMetadata>
Response if not successful = <Error>

To get the full state of a game:
GET /game/<GameID>/state
Response if successful = <GameState>
Response if not successful = <Error>

#TODO - interface for creating a game
#TODO - detect timeouts via heartbeating?

To join, leave, resign a game, make a move:
POST /games/<GameID>/actions/join {"auth":<Auth>}
POST /games/<GameID>/actions/leave {"auth":<Auth>}
POST /games/<GameID>/actions/resign {"gameauth":<GameAuth>}
POST /games/<GameID>/actions/move {
  "gameauth":<GameAuth>,
  "move":<String>, #ex: Ra1n Ra2n Ra3e Rb3e Rc3x"
  "moveNum:<Int>   #1g = 0, 1s = 1, 2g = 2, 2s = 3, ...
}
Response if successful = <Message>
Response if not successful = <Error>

To get a list of all games satisfying:
GET /games/search?key=value&key=value&...
Legal keys and values:
  player1=<UserName>  #Involves the given user
  player2=<UserName>  #Involves the given user
  gplayer=<UserName>  #Gold player is the given user
  splayer=<UserName>  #Silver player is the given user
  rated=<Bool>        #Require games to be rated or unrated
  experimental=<Bool> #Require games to be experimental or not
  active=<Bool>       #Require games to be active or not
  limit=<Int>         #Limit the number of returned games to this many (default 100, max 1000)
  mintime=<Int>       #game occurs on or after this timestamp
  maxtime=<Int>       #game occurs on or before this timestamp
  mindate=<String>    #ex: 2015-01-01, game occurs on or after this date in the given timezone
  maxdate=<String>    #ex: 2015-01-01, game occurs on or before this date in the given timezone
  zone=<String>       #Timezone for mindate and maxdate, default UTC

Response if successful = [<GameMetadata>,<GameMetadata>,...]
Response if not successful = <Error>
